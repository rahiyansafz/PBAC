// <auto-generated />
using System;
using AccessManagementAPI.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AccessManagementAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AccessManagementAPI.Core.Models.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("RequiredPermissionSystemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayName = "Dashboard",
                            DisplayOrder = 1,
                            Icon = "home",
                            IsVisible = true,
                            Name = "Dashboard",
                            ParentId = 0,
                            RequiredPermissionSystemName = "",
                            Url = "/dashboard"
                        },
                        new
                        {
                            Id = 2,
                            DisplayName = "User Management",
                            DisplayOrder = 2,
                            Icon = "users",
                            IsVisible = true,
                            Name = "UserManagement",
                            ParentId = 0,
                            RequiredPermissionSystemName = "users.view",
                            Url = "#"
                        },
                        new
                        {
                            Id = 3,
                            DisplayName = "Users",
                            DisplayOrder = 1,
                            Icon = "user",
                            IsVisible = true,
                            Name = "Users",
                            ParentId = 2,
                            RequiredPermissionSystemName = "users.view",
                            Url = "/users"
                        },
                        new
                        {
                            Id = 4,
                            DisplayName = "Roles",
                            DisplayOrder = 2,
                            Icon = "shield",
                            IsVisible = true,
                            Name = "Roles",
                            ParentId = 2,
                            RequiredPermissionSystemName = "roles.view",
                            Url = "/roles"
                        },
                        new
                        {
                            Id = 5,
                            DisplayName = "Permissions",
                            DisplayOrder = 3,
                            Icon = "key",
                            IsVisible = true,
                            Name = "Permissions",
                            ParentId = 2,
                            RequiredPermissionSystemName = "permissions.view",
                            Url = "/permissions"
                        },
                        new
                        {
                            Id = 6,
                            DisplayName = "Menu Management",
                            DisplayOrder = 3,
                            Icon = "list",
                            IsVisible = true,
                            Name = "MenuManagement",
                            ParentId = 0,
                            RequiredPermissionSystemName = "menus.manage",
                            Url = "/menus"
                        },
                        new
                        {
                            Id = 7,
                            DisplayName = "Results",
                            DisplayOrder = 4,
                            Icon = "file-text",
                            IsVisible = true,
                            Name = "Results",
                            ParentId = 0,
                            RequiredPermissionSystemName = "results.view",
                            Url = "/results"
                        });
                });

            modelBuilder.Entity("AccessManagementAPI.Core.Models.MenuRoleVisibility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("RoleId");

                    b.ToTable("MenuRoleVisibilities");
                });

            modelBuilder.Entity("AccessManagementAPI.Core.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resource")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "Read",
                            Category = "Users",
                            Description = "Permission to view users",
                            Name = "View Users",
                            Resource = "User",
                            SystemName = "users.view"
                        },
                        new
                        {
                            Id = 2,
                            Action = "Create",
                            Category = "Users",
                            Description = "Permission to create users",
                            Name = "Create Users",
                            Resource = "User",
                            SystemName = "users.create"
                        },
                        new
                        {
                            Id = 3,
                            Action = "Update",
                            Category = "Users",
                            Description = "Permission to edit users",
                            Name = "Edit Users",
                            Resource = "User",
                            SystemName = "users.edit"
                        },
                        new
                        {
                            Id = 4,
                            Action = "Delete",
                            Category = "Users",
                            Description = "Permission to delete users",
                            Name = "Delete Users",
                            Resource = "User",
                            SystemName = "users.delete"
                        },
                        new
                        {
                            Id = 5,
                            Action = "Read",
                            Category = "Roles",
                            Description = "Permission to view roles",
                            Name = "View Roles",
                            Resource = "Role",
                            SystemName = "roles.view"
                        },
                        new
                        {
                            Id = 6,
                            Action = "Create",
                            Category = "Roles",
                            Description = "Permission to create roles",
                            Name = "Create Roles",
                            Resource = "Role",
                            SystemName = "roles.create"
                        },
                        new
                        {
                            Id = 7,
                            Action = "Update",
                            Category = "Roles",
                            Description = "Permission to edit roles",
                            Name = "Edit Roles",
                            Resource = "Role",
                            SystemName = "roles.edit"
                        },
                        new
                        {
                            Id = 8,
                            Action = "Delete",
                            Category = "Roles",
                            Description = "Permission to delete roles",
                            Name = "Delete Roles",
                            Resource = "Role",
                            SystemName = "roles.delete"
                        },
                        new
                        {
                            Id = 9,
                            Action = "Read",
                            Category = "Permissions",
                            Description = "Permission to view permissions",
                            Name = "View Permissions",
                            Resource = "Permission",
                            SystemName = "permissions.view"
                        },
                        new
                        {
                            Id = 10,
                            Action = "Update",
                            Category = "Permissions",
                            Description = "Permission to assign permissions to roles",
                            Name = "Assign Permissions",
                            Resource = "Permission",
                            SystemName = "permissions.assign"
                        },
                        new
                        {
                            Id = 11,
                            Action = "Read",
                            Category = "Results",
                            Description = "Permission to view results",
                            Name = "View Results",
                            Resource = "Result",
                            SystemName = "results.view"
                        },
                        new
                        {
                            Id = 12,
                            Action = "Create",
                            Category = "Results",
                            Description = "Permission to create results",
                            Name = "Create Results",
                            Resource = "Result",
                            SystemName = "results.create"
                        },
                        new
                        {
                            Id = 13,
                            Action = "Update",
                            Category = "Results",
                            Description = "Permission to edit results",
                            Name = "Edit Results",
                            Resource = "Result",
                            SystemName = "results.edit"
                        },
                        new
                        {
                            Id = 14,
                            Action = "Delete",
                            Category = "Results",
                            Description = "Permission to delete results",
                            Name = "Delete Results",
                            Resource = "Result",
                            SystemName = "results.delete"
                        },
                        new
                        {
                            Id = 15,
                            Action = "Update",
                            Category = "System",
                            Description = "Permission to manage menu items",
                            Name = "Manage Menus",
                            Resource = "Menu",
                            SystemName = "menus.manage"
                        });
                });

            modelBuilder.Entity("AccessManagementAPI.Core.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSystemRole")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "System administrator with full access to all features",
                            IsSystemRole = true,
                            Name = "Administrator",
                            SystemName = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Student role with limited permissions",
                            IsSystemRole = true,
                            Name = "Student",
                            SystemName = "Student"
                        });
                });

            modelBuilder.Entity("AccessManagementAPI.Core.Models.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PermissionId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            PermissionId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            PermissionId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            PermissionId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 5,
                            PermissionId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 6,
                            PermissionId = 6,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 7,
                            PermissionId = 7,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 8,
                            PermissionId = 8,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 9,
                            PermissionId = 9,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 10,
                            PermissionId = 10,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 11,
                            PermissionId = 11,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 12,
                            PermissionId = 12,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 13,
                            PermissionId = 13,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 14,
                            PermissionId = 14,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 15,
                            PermissionId = 15,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 16,
                            PermissionId = 11,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("AccessManagementAPI.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmailVerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EmailVerificationTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            PasswordHash = "$2a$11$ysX3ykS8fYQfDmPFKPYj4eQCsJJXBgT3UfQoDQtfF.1c1HnCyjXwm",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("AccessManagementAPI.Core.Models.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("AccessManagementAPI.Core.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("AccessManagementAPI.Core.Models.MenuRoleVisibility", b =>
                {
                    b.HasOne("AccessManagementAPI.Core.Models.MenuItem", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccessManagementAPI.Core.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AccessManagementAPI.Core.Models.RolePermission", b =>
                {
                    b.HasOne("AccessManagementAPI.Core.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccessManagementAPI.Core.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AccessManagementAPI.Core.Models.UserClaim", b =>
                {
                    b.HasOne("AccessManagementAPI.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AccessManagementAPI.Core.Models.UserRole", b =>
                {
                    b.HasOne("AccessManagementAPI.Core.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccessManagementAPI.Core.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AccessManagementAPI.Core.Models.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("AccessManagementAPI.Core.Models.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AccessManagementAPI.Core.Models.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
